

public class ReorderList {
	public void Reorder(ListNode head)
	{
		// find mid
		//reverse list after mid
		// reorder it
		
		
		// findMid
		ListNode mid = findMid(head);
		
		//do half part reverse
		ListNode reversed = reverse(mid);
		
		// Reorder it
		ListNode ReorderList = Reorder(head,reversed);
		print(ReorderList);
		
	}
	public ListNode Reorder(ListNode head, ListNode rev)
	{
				
		ListNode list1 = head;
		ListNode list2 = rev;
		
		
		ListNode next1 = null;
		ListNode next2 = null;
		
		while(list1.next != null && list2.next != null)
        {
        	next1 = list1.next;
        	next2 = list2.next;
        	
        	list1.next = list2;
        	list2.next = next1;
        	
        	list1 = next1;
        	list2 = next2;
        }
		return head;
		
	}
	public ListNode findMid(ListNode head)
	{
		if(head == null )
			return null;
		ListNode slow, fast;
		slow =head;
		fast = head;
		while(fast != null && fast.next != null)
		{
			slow = slow.next;;
			fast = fast.next.next;
		}
		return slow;
	}
	
	public ListNode reverse(ListNode head)
	{
		ListNode temp = head;
		ListNode curr,prev = null,next = null;
		curr = head;
		while(curr != null)
		{
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		head = prev;
		
		return head;
	}
	public void print(ListNode head)
	{
		ListNode temp = head;
		while(temp != null)
		{
			System.out.println(temp.data+"->");
			temp =temp.next;
		}
	}
}

public class ListNode {
	int data;
	ListNode next;
	
	ListNode(int data)
	{
		this.data = data;
		next = null;
	}
}

public class main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ListNode head = new ListNode(10);
		ListNode node1 = new ListNode(20);
		ListNode node2 = new ListNode(30);
		ListNode node3 = new ListNode(40);
		ListNode node4 = new ListNode(50);
		ListNode node5 = new ListNode(60);
		head.next = node1;
		node1.next = node2;
		node2.next = node3;
		node3.next = node4;
		node4.next = node5;
		ReorderList list = new ReorderList();
		list.Reorder(head);		
	}
}

