// Time complexity o(m+n)
//space complexity s(1)
public class MergeList {
	
	
	public ListNode mergeList(ListNode head1, ListNode head2)
	{
		ListNode result = null;
		
		if(head1 == null && head2 == null)
		{
			return null;
		}
		if(head1 == null)
			return head2;
		if(head2 == null)
			return head1;
		
		if(head1.data < head2.data)
		{
			result = head1;
			result.next	= mergeList(head1.next, head2);
		}
		else 
		{
			result = head2;
			result.next=mergeList(head1,head2.next);
		}			
		return result;
	}
	
	public void print(ListNode head)
	{
		ListNode temp = head;
		while(temp != null)
		{
			System.out.println(temp.data+"->");
			temp =temp.next;
		}
	}
}



public class ListNode {
	int data;
	ListNode next;
	
	ListNode(int data)
	{
		this.data = data;
		next = null;
	}
	
}

public class main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ListNode head = new ListNode(1);
		ListNode node1 = new ListNode(4);
		ListNode node2 = new ListNode(6);
		ListNode node3 = new ListNode(9);
		head.next = node1;
		node1.next = node2;
		node2.next = node3;
		
		// TODO Auto-generated method stub
				ListNode head1 = new ListNode(2);
				ListNode node11 = new ListNode(5);
				ListNode node12 = new ListNode(10);
				ListNode node13 = new ListNode(15);
				head1.next = node11;
				node11.next = node12;
				node12.next = node13;
		
		MergeList list1 = new MergeList();
		ListNode Result = list1.mergeList(head, head1);
		list1.print(Result);
	
		//ListNode node4 = new ListNode(2);
		//ListNode node5 = new ListNode(1);
		//ListNode node6 = new ListNode(70);
	}

}
