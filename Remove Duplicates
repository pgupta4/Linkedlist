
//Time complexity 0(n)
public class DuplicateNodes {
	
	public void print(ListNode head)
	{
		ListNode temp = head;
		while(temp != null)
		{
			System.out.println(temp.data+"->");
			temp =temp.next;
		}
	}
	public ListNode deleteDuplicates(ListNode head)
	{
		ListNode temp = head;
		if(temp == null || temp.next == null)
			return temp;
		while(temp !=null && temp.next !=null)
		{	
			if(temp.data == temp.next.data)
			{
				temp.next = temp.next.next;
			}
			
			else
				temp = temp.next;
		}
		return head;
	}
}
public class ListNode {
	int data;
	ListNode next;
	
	ListNode(int data)
	{
		this.data = data;
		next = null;
	}
}
public class main {
	public static void main(String args[])
	{
		ListNode head1 = new ListNode(1);
		ListNode node1 = new ListNode(1);
		ListNode node2 = new ListNode(3);
		ListNode node3 = new ListNode(4);
		ListNode node4 = new ListNode(4);
		head1.next = node1;
		node1.next = node2;
		node2.next = node3;
		node3.next = node4;
		
		DuplicateNodes list = new DuplicateNodes();
		//list.print(head1);
		ListNode head = list.deleteDuplicates(head1);
		list.print(head);
	}
}
